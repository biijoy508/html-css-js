ECMAScript is the name used by the language specification.ECMAScript is the official name for JavaScript.  ECMAScript 6 is currently being developed.
-------------------------Data types-------------------------------------------------------------------------------------
Primitive values are booleans, numbers, strings, null, and undefined.
All other values are objects
  Booleans can be objects (if defined with the new keyword)
  Numbers can be objects (if defined with the new keyword)
  Strings can be objects (if defined with the new keyword)
  Dates are always objects
  Maths are always objects
  Regular expressions are always objects
  Arrays are always objects
  Functions are always objects
  Objects are always objects
---------------------Using Object prototype-----------------------------------------------------------------------  
  function person(first, last, age, eye) { //a constructor
    this.firstName = first;
    this.lastName = last;
    this.age = age;
    this.eyeColor = eye;
}
var myFather = new person("John", "Doe", 50, "blue");

prototype: person.prototype.nationality = "English"; // adding a new property to constructor
----------------------Equality--------------------------------------------------------------------
two object with same parameter and values are not same, one object is only equal to itself. 
two primitive type with same value is equal to each other 
----------------------Number, NaN, Infinity-----------------------------------------------------------------------
All numbers in JavaScript are floating-point. error in number is either a NaN or infinity. 
 >isNumber(''xyz)= NaN , > 3/0= infinity , >Math.pow(2,1024) = infinity (number too large)
The global object Math (see Math) provides more arithmetic operations, via functions.
---------------------Undefined, Null-----------------------------------------------------------------
undefined means “no value.” Uninitialized variables are undefined: var foo; 
                            Missing parameters are undefined: function f(x) { return x }
                                                              > f() : undefined
                           Reading a nonexistent property is undefined: > var obj = {}; // empty object
                                                                        > obj.foo: undefined
null means “no object.” It is used as a nonvalue whenever an object is expected (parameters, last in a chain of objects, etc.).
Best way to check for undefined, null, false, 0, NaN, '' is if(!x) where x is a variable. All these 6 cases returns false. 
-------------------------------------------------------
 typeof null === 'object'
 ------------------------------------------------------   
 value instanceof Constr : shortcut for constructor
     var b = new Bar();  // object created by constructor Bar
     > b instanceof Bar :true
     > {} instanceof Object :true
     > [] instanceof Array :true
     > [] instanceof Object : true
     > undefined instanceof Object : false
     > null instanceof Object :false
 --------------------- Logical operators -----------------------------------------------------------------------------------
A single equals sign (=) is used to assign a value to a variable.
double equals(==) will perform a type conversion when comparing two things;
A triple equals sign (===) compare without type conversion (by simply always returning false if the types differ);
                ===, !==, ==, !=
Declares (creates) a variable foo: var foo;
Assigning variable value: foo = 4; var lul = 5;
Compound assignment: x += 1;
----------------------if-then-else, Switch, Comment------------------------------------------------
JavaScript has two different ways to do if-then-else
    1. statement var x;
       if (y >= 0) {
          x = y;
          } else {
          x = -y;
          }
    2. expression var x = y >= 0 ? y : -y;
 Using expression as method parameter: myFunction(y >= 0 ? y : -y)
 semicolon: var l = 8; var z = function(){};
 Comments: single line : x++; // single-line comment
           multiline: /* This is
                         a multiline
                         comment.
                      */
-------------------------------Reserve words-----------------------------------------------------------------                      
 words should not be variable name: arguments break case catch class const continue debugger 
 default delete do else enum export extends false finally for function if implements
 import in instanceof interface let new null package private protected public return
 static super switch this throw true try typeof var void while Infinity NaN undefined
 --------------------------------Object Declaration---------------------------------------------------------
 value.propKey => var str = 'abc'; str.length;  eller 'abc'.length; eller 'abc'.toUpperCase
 object declaration: var object = {};
 Inserting a property to an object: object.foo= 24.5;
 
 ------------------------------- String  ---------------------------------------
 backslash (\) escapes characters: "Did she say \"Hello\"?" ; 'That\'s nice!';
 > var str = 'abc';  >str[1] -> output: b
 > 'You have ' + messageCount + '\n messages'
 > var str = 'u'; str+= 'suck'; -> 'u suck'
 > 'abc'.length = 3 , 
 > 'abc'.slice(1,2) 
 > '\t xyz  '.trim()  // trim whitespace
 > 'mjölnir'.toUpperCase(): 'MJÖLNIR'
 > 'abc'.indexOf('b') = 1 ; 'abc'.indexOf('w') = -1 ****
 ---------------------------------------------------------------------------
 if (myvar === 0) {
    // then
} else if (myvar === 1) {
    // else-if
} else {
    // else
}

switch (fruit) {
    case 'banana': ** case uses === same type same value, no type conversion
        // ...
        break;
    case 'apple':
        // ...
        break;
    default:  // all other cases
        // ...
}
------------------------------------------------------------------------------------------------------------------------
for,for ...in, while, do...while are loops, 
   break leaves the loop.
   continue starts a new loop iteration.
-----------------------------------------------------------------------------------------------------------------------------
Hoisting: a variable/method can be used before it has been declared. X=5; var X; but if we assign a method to a var , we can not 
hoist
Strict mode: disable hoisting
---------------------------------------------------------------------------------------------------------------------
we can do wonderful things to the property of an object, like write only, read only, customise getter , setter. 
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create
 ----------------------------------------------------------------------------------------------------------------
  >var obj = {};
   Object.defineProperty(obj, "x", {value:0, writable:false});
   obj.x;
   >var obj = {}; var bValue = 30; 
   Object.defineProperty(obj, 'lul', 
           {
            get: function() { return bValue; },
            set: function(newValue) { bValue = newValue; },
            enumerable: false,   /*The enumerable property attribute defines whether 
                                   the property shows up in a for...in loop and Object.keys() or not.*/
            configurable: false, /*The configurable attribute controls at the same time 
                                   whether the property can be deleted from the object and whether its 
                                   attributes (other than writable to false) can be changed.*/
            writable: false,
            value: 'despacito' //any value
           });
----------------------------------------------------------------------------------------------------------------           
    object.prototype.watch // watched for property value change and triggers a function, watchdog
         var o = { p: 1 };
       o.watch('p', function (id, oldval, newval) {
              console.log('o.' + id + ' changed from ' + oldval + ' to ' + newval);
              return newval;
              });
       o.p = 2; o.p = 3;
       delete o.p;
       o.p = 4;
       o.unwatch('p');
       o.p = 5;
       Output: 
         o.p changed from 1 to 2
         o.p changed from 2 to 3
         o.p changed from undefined to 4
--------------------------------------------------------------------------------------------------------------
    Object.assign(target, ...sources) method is used to copy the values of all enumerable own properties 
    from one or more source objects to a target object. It will return the target object.
       var o1 = { a: 1, b: 1, c: 1 };
       var o2 = { b: 2, c: 2 };
       var o3 = { c: 3 };
      > var obj = Object.assign(o1, o2, o3); // o1 is target, extending with new properties from o2, o3
        console.log(obj); // { a: 1, b: 2, c: 3 }
        console.log(o1);  // { a: 1, b: 2, c: 3 }, target object itself is changed.
       >var obj = Object.assign({}, o1, o2, o3); // {} is target, merging values of all 3 objects
       console.log(obj); // { a: 1, b: 2, c: 3 }
------------------------------------------------------------------------------------------------------------
    The Object.seal() method seals an object, preventing new properties from being added to it and
    marking all existing properties as non-configurable.
--------------------------------------------------------------------------------------------------------------    
    Object.keys() and Object.values() returns enumerable keys and values of an object. if key is not defined it 
    will return index number instead (0,1,2,3 ...), Object.entities() returns as [key, value] pair.
--------------------------------------------------------------------------------------------------------------    
    We can use Object.create() to achieve classical inheritance, creates a new object with the specified prototype object and properties.
    Example : 
        // Shape - superclass
       function Shape() {
       this.x = 0;
        this.y = 0;
       }

       // superclass method
       Shape.prototype.move = function(x, y) {
        this.x += x;
        this.y += y;
        console.info('Shape moved.');
         };

      // Rectangle - subclass
       function Rectangle() {
       Shape.call(this); // call super constructor.
        }

       // subclass extends superclass
      Rectangle.prototype = Object.create(Shape.prototype);
      Rectangle.prototype.constructor = Rectangle;

     var rect = new Rectangle();

     console.log('Is rect an instance of Rectangle?',
      rect instanceof Rectangle); // true
      console.log('Is rect an instance of Shape?',
      rect instanceof Shape); // true
      rect.move(1, 1); // Outputs, 'Shape moved.'
---------------------------------------------------------------------------------------------------------------------



 

 
 
 
 
 
 
 
 
 
